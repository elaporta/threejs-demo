<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

        <title>Babylon.js sample code</title>

        <!-- Babylon.js -->
        <script src="https://cdn.babylonjs.com/babylon.js"></script>
        <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #renderCanvas {
                width: 100%;
                height: 100%;
                touch-action: none;
            }
        </style>
    </head>
<body>
    <canvas id="renderCanvas"></canvas>
    <script>
        // https://forum.babylonjs.com/top/weekly
        var canvas = document.getElementById("renderCanvas");

        var engine = null;
        var scene = null;
        var sceneToRender = null;
        var createDefaultEngine = function() { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true }); };

        // var delayCreateScene = function () {
        //     // Create the scene space
        //     var scene = new BABYLON.Scene(engine);
        
        //     // Add a camera to the scene and attach it to the canvas
        //     var camera = new BABYLON.ArcRotateCamera("Camera", Math.PI / 2, Math.PI / 2, 2, BABYLON.Vector3.Zero(), scene);

        //     // The first parameter can be used to specify which mesh to import. Here we import all meshes
        //     BABYLON.SceneLoader.Append("assets/models/living/", "luces.gltf", scene, function (newMeshes) {
        //         scene.createDefaultCameraOrLight(true);
        //         scene.activeCamera.attachControl(canvas, false);
        //         scene.activeCamera.alpha += Math.PI; // camera +180Â°
        //     });
        
        //     return scene;
        // }

        var createScene = function () {

            // This creates a basic Babylon Scene object (non-mesh)
            var scene = new BABYLON.Scene(engine);

            // This creates and positions a free camera (non-mesh)
            var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);

            // This targets the camera to scene origin
            camera.setTarget(BABYLON.Vector3.Zero());

            // This attaches the camera to the canvas
            camera.attachControl(canvas, true);

            // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
            var light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

            // Default intensity is 1. Let's dim the light a small amount
            light.intensity = 0.7;

            // Our built-in 'sphere' shape.
            BABYLON.SceneLoader.Append("assets/models/living/", "luces.gltf", scene, function (newMeshes) {
                // var instance = new BABYLON.Mesh("EFAA108476604377BE7372D165444464", scene);
                // newMeshes.meshes[0].getChildMeshes().forEach(m => {
                //     debugger;
                //     var m2 = (m).createInstance("EFAA108476604377BE7372D165444464");
                //     m2.id = "EFAA108476604377BE7372D165444464";
                //     m2.name = m.name;
                //     m2.parent = instance;
                // });
                // instance.id = "EFAA108476604377BE7372D165444464";
                // instance.enablePointerMoveEvents = false;
                // instance.getChildMeshes().forEach(e => {
                //     e.ignoreNonUniformScaling = true;
                //     e.freezeWorldMatrix();
                // });
            });

            return scene;

        };

        var engine;

        try {
            engine = createDefaultEngine();
        } catch(e) {
            console.log("the available createEngine function failed. Creating the default engine instead");
            engine = createDefaultEngine();
        }

        if (!engine) throw 'engine should not be null.';
        scene = createScene();

        engine.runRenderLoop(function () {
            if (scene) {
                scene.render();
            }
        });

        // Resize
        window.addEventListener("resize", function () {
            engine.resize();
        });
    </script>
</body>
</html>
